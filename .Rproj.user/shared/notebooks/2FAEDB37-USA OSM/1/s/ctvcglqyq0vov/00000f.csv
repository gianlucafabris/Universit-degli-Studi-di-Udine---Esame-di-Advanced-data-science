"0","centrality = function(g, state){"
"0","  data.frame("
"0","    state = state,"
"0","    node = V(g)$name,"
"0","    degree = degree(g, mode = ""all""),"
"0","    degreeW = strength(g, weights = E(g)$dist),"
"0","    closeness = closeness(g, weights = (E(g)$dist+0.000001), normalized = TRUE),"
"0","    betweenness = betweenness(g, weights = (E(g)$dist+0.000001), normalized = TRUE),"
"0","    eigen = eigen_centrality(g, weights = E(g)$dist)$vector,"
"0","    katz = alpha_centrality(g, weights = E(g)$dist),"
"0","    pr = page_rank(g, weights = E(g)$dist)$vector #funziona su diretti"
"0","    #hits_a = authority_score(g, weights = E(g)$dist)$vector, #funziona solo su diretti"
"0","    #hits_h = hub_score(g, weights = E(g)$dist)$vector #funziona solo su diretti"
"0","  )"
"0","}"
"0",""
"0","similarity = function(g, mode = ""col""){"
"0","  if(ecount(g) == 0){"
"0","    A = as_adjacency_matrix(g, sparse = FALSE)"
"0","    return(list(cosine = cor(A), pearson = cor(A), global = cor(A)))"
"0","  }"
"0","  A = as_adjacency_matrix(g, attr = ""dist"", sparse = FALSE)"
"0","  if(mode == ""row""){"
"0","    A = t(A)"
"0","  }"
"0","  cosine = function(A){"
"0","    euclidean = function(x){"
"0","      sqrt(x %*% x)"
"0","    }"
"0","    d = apply(A, 2, euclidean)"
"0","    D = diag(1/d)"
"0","    S = D %*% t(A) %*% A %*% D"
"0","    return(S)"
"0","  }"
"0","  pearson = function(A){"
"0","    S = cor(A)"
"0","    return(S)"
"0","  }"
"0","  global = function(A){"
"0","    alpha = 0.85 / max(abs(eigen(A)$values))"
"0","    I = diag(1, vcount(g))"
"0","    S = solve(I - alpha * A)"
"0","    S = S - diag(diag(S))"
"0","    return(S)"
"0","  }"
"0","  return(list(cosine = cosine(A), pearson = pearson(A), global = global(A)))"
"0","}"
"0",""
"0","heterogeneity = function(g, mode = ""col""){"
"0","  if(ecount(g) == 0){"
"0","    A = as_adjacency_matrix(g, sparse = FALSE)"
"0","    return(list(shannon = cor(A), simpson = cor(A), rao = cor(A)))"
"0","  }"
"0","  A = as_adjacency_matrix(g, attr = ""dist"", sparse = FALSE)"
"0","  D = A"
"0","  if(mode == ""col""){"
"0","    A = A %*% diag(1/colSums(A))"
"0","    dim = 2 "
"0","  }else{"
"0","    A = diag(1/rowSums(A)) %*% A"
"0","    dim = 1 "
"0","  }"
"0","  shannon = function(p){"
"0","    x = p * log2(p)"
"0","    x = replace(x, is.nan(x), 0)"
"0","    return(-sum(x))"
"0","  }"
"0","  simpson = function(p){"
"0","    x = 1 - sum(p * p)"
"0","    return(x)"
"0","  }"
"0","  rao = function(p, D){"
"0","    x = diag(p) %*% D %*% diag(p)"
"0","    return(sum(c(x)))"
"0","  }"
"0","  return(list(shannon = apply(A, dim, shannon), simpson = apply(A, dim, simpson), rao = apply(A, dim, rao, D)))"
"0","}"
"0",""
"0","similarity_heterogeneity = function(g, state){"
"0","  s = similarity(g)"
"0","  h = heterogeneity(g)"
"0","  list("
"0","    state = state,"
"0","    cosine = s$cosine,"
"0","    pearson = s$pearson,"
"0","    global = s$global,"
"0","    shannon = h$shannon,"
"0","    simpson = h$simpson,"
"0","    rao = h$rao"
"0","  )"
"0","}"
"0",""
"0","communities = function(g){"
"0","  methods = list("
"0","    ""edge betweenness"" = cluster_edge_betweenness,"
"0","    ""fast greedy"" = cluster_fast_greedy,"
"0","    ""label propagation"" = cluster_label_prop,"
"0","    ""leading eigenvector"" = cluster_leading_eigen,"
"0","    ""louvain"" = cluster_louvain,"
"0","    ""walktrap"" = cluster_walktrap,"
"0","    #""spinglass"" = function(graph) cluster_spinglass(graph, spins = 10), #funziona solo su connesso"
"0","    ""infomap"" = cluster_infomap"
"0","    #""optimal"" = cluster_optimal #lento su grafi grandi"
"0","  )"
"0","  results = data.frame(method = character(), res = I(list()), stringsAsFactors = FALSE)"
"0","  for(method in names(methods)){"
"0","    tryCatch({"
"0","      results = rbind(results, data.frame(method = method, res = I(list(methods[[method]](g)))))"
"0","    }, error = function(e) {"
"0","      cat(""Error with method:"", method, ""\n"")"
"0","      results = rbind(results, data.frame(method = method, res = I(list(NA))))"
"0","    })"
"0","  }"
"0","  return(results)"
"0","}"
"0",""
"0","clustering = function(g){"
"0","  methods = c(""average"", ""centroid"", ""single"", ""complete"")"
"0","  d = as.dist(as_adjacency_matrix(g, attr = ""dist"", sparse = FALSE))"
"0","  results = data.frame(method = character(), res = I(list()), stringsAsFactors = FALSE)"
"0","  for(method in methods){"
"0","    results = rbind(results, data.frame(method = method, res = I(list(hclust(d, method = method)))))"
"0","  }"
"0","  return(results)"
"0","}"
"0",""
"0","communities_clustering = function(g, state){"
"0","  co = communities(g)"
"0","  cl = clustering(g)"
"0","  data.frame("
"0","    state = state,"
"0","    communities_betweenness = co$res[1],"
"0","    communities_fast = co$res[2],"
"0","    communities_lprop = co$res[3],"
"0","    communities_eigen = co$res[4],"
"0","    communities_louvain = co$res[5],"
"0","    communities_walktrap = co$res[6],"
"0","    communities_infomap = co$res[7],"
"0","    clustering_average = cl$res[1],"
"0","    clustering_centroid = cl$res[2],"
"0","    clustering_single = cl$res[3],"
"0","    clustering_complete = cl$res[4]"
"0","  )"
"0","}"
"0",""
"0","XXXXXXXXXXXXXXXXXXXXXX"
"2","Errore: oggetto 'XXXXXXXXXXXXXXXXXXXXXX' non trovato
"
