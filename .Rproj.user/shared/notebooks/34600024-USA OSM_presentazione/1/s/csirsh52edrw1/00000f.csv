"0","#local"
"0",""
"0","centrality = function(g, state){"
"0","  data.frame("
"0","    state = state,"
"0","    node = V(g)$name,"
"0","    degree = degree(g),"
"0","    degreeW = strength(g, weights = E(g)$dist),"
"0","    closeness = closeness(g, weights = (E(g)$dist+0.000001), normalized = TRUE),"
"0","    betweenness = betweenness(g, weights = (E(g)$dist+0.000001), normalized = TRUE),"
"0","    eigen = eigen_centrality(g, weights = E(g)$dist)$vector,"
"0","    katz = alpha_centrality(g, weights = E(g)$dist),"
"0","    pagerank = page_rank(g, weights = E(g)$dist)$vector #funziona su diretti"
"0","    #hits_a = authority_score(g, weights = E(g)$dist)$vector, #funziona solo su diretti"
"0","    #hits_h = hub_score(g, weights = E(g)$dist)$vector #funziona solo su diretti"
"0","  )"
"0","}"
"0",""
"0","similarity = function(g, mode = ""col""){"
"0","  if(ecount(g) == 0){"
"0","    return(list(cosine = NA, pearson = NA, global = NA))"
"0","  }"
"0","  A = as_adjacency_matrix(g, attr = ""dist"", sparse = FALSE)"
"0","  if(mode == ""row""){"
"0","    A = t(A)"
"0","  }"
"0","  cosine = function(A){"
"0","    euclidean = function(x){"
"0","      sqrt(x %*% x)"
"0","    }"
"0","    D = diag(1/apply(A, 2, euclidean))"
"0","    S = D %*% t(A) %*% A %*% D"
"0","    return(S)"
"0","  }"
"0","  global = function(A){"
"0","    S = solve(diag(1, vcount(g)) - 0.85 / max(abs(eigen(A)$values)) * A)"
"0","    S = S - diag(diag(S))"
"0","    return(S)"
"0","  }"
"0","  return(list(cosine = cosine(A), pearson = cor(A), global = global(A)))"
"0","}"
"0",""
"0","heterogeneity = function(g, mode = ""col""){"
"0","  if(ecount(g) == 0){"
"0","    return(list(shannon = NA, simpson = NA))"
"0","  }"
"0","  A = as_adjacency_matrix(g, attr = ""dist"", sparse = FALSE)"
"0","  D = A"
"0","  if(mode == ""col""){"
"0","    A = A %*% diag(1/colSums(A))"
"0","    dim = 2 "
"0","  }else{"
"0","    A = diag(1/rowSums(A)) %*% A"
"0","    dim = 1 "
"0","  }"
"0","  shannon = function(p){"
"0","    x = p * log2(p)"
"0","    x = replace(x, is.nan(x), 0)"
"0","    return(-sum(x))"
"0","  }"
"0","  simpson = function(p){"
"0","    x = 1 - sum(p * p)"
"0","    return(x)"
"0","  }"
"0","  # rao = function(p, D){ #lento su grafi grandi"
"0","  #   x = diag(p) %*% D %*% diag(p)"
"0","  #   return(sum(c(x)))"
"0","  # }"
"0","  return(list(shannon = apply(A, dim, shannon), simpson = apply(A, dim, simpson)))"
"0","}"
"0",""
"0","#group"
"0",""
"0","communities = function(g){"
"0","  methods = list("
"0","    ""edge_betweenness"" = cluster_edge_betweenness,"
"0","    ""fast_greedy"" = cluster_fast_greedy,"
"0","    ""label_prop"" = cluster_label_prop,"
"0","    ""leading_eigen"" = cluster_leading_eigen,"
"0","    ""louvain"" = cluster_louvain,"
"0","    ""walktrap"" = cluster_walktrap,"
"0","    #""spinglass"" = function(graph) cluster_spinglass(graph, spins = 10), #funziona solo su connesso"
"0","    ""infomap"" = cluster_infomap"
"0","    #""optimal"" = cluster_optimal #lento su grafi grandi"
"0","  )"
"0","  do.call(rbind, lapply(names(methods), function(method) {"
"0","    tryCatch("
"0","      data.frame(method = method, result = I(list(methods[[method]](g)))),"
"0","      error = function(e) {"
"0","        message(""Error with method: "", method)"
"0","        data.frame(method = method, result = I(list(NA)))"
"0","      }"
"0","    )"
"0","  }))"
"0","}"
"0",""
"0","clustering = function(g){"
"0","  methods = c(""average"", ""centroid"", ""single"", ""complete"")"
"0","  d = as.dist(as_adjacency_matrix(g, attr = ""dist"", sparse = FALSE))"
"0","  do.call(rbind, lapply(methods, function(method){"
"0","    data.frame(method = method, result = I(list(hclust(d, method = method))))"
"0","  }))"
"0","}"
"0",""
"0","#global"
"0",""
"0","connettivity = function(g){"
"0","  list("
"0","    components = components(g),"
"0","    biconnected_components = biconnected_components(g),"
"0","    cohesive_blocks = cohesive_blocks(g)"
"0","  )"
"0","}"
"0",""
"0","resilience = function(g){"
"0","  percolate = function(g, size, d){"
"0","    giant = vector()"
"0","    c = components(g)"
"0","    giant[1] = max(c$csize)"
"0","    names(d) = 1:length(d)"
"0","    d = sort(d, decreasing=TRUE)"
"0","    vital = as.integer(names(d[1:size]))"
"0","    for (i in 1:size) {"
"0","      c = components(delete_vertices(g, vital[1:i]))"
"0","      giant[i+1] = max(c$csize)"
"0","    }"
"0","    giant"
"0","  }"
"0","  size = floor(vcount(g)/2)"
"0","  c = centrality(g, """")"
"0","  data.frame("
"0","    rand = percolate(g, size, d = sample(V(g), size)),"
"0","    degree = percolate(g, size, d = c$degree),"
"0","    degreeW = percolate(g, size, d = c$degreeW),"
"0","    closeness = percolate(g, size, d = c$closeness),"
"0","    betweenness = percolate(g, size, d = c$betweenness),"
"0","    eigen = percolate(g, size, d = c$eigen),"
"0","    katz = percolate(g, size, d = c$katz),"
"0","    pagerank = percolate(g, size, d = c$pagerank)"
"0","  )"
"0","}"
"0",""
"0","geodesic = function(g, state){"
"0","  list("
"0","    geodesic_mean = mean_distance(g),"
"0","    geodesic_diameter = diameter(g),"
"0","    geodesic_diameter_nodes = get_diameter(g)"
"0","  )"
"0","}"
"0",""
"0","power_law = function(g){"
"0","  ccdf = function(d){"
"0","    p = rep(0, max(d))"
"0","    for (i in 1:length(p)) {"
"0","      p[i] = length(d[d >= i]) / length(d)"
"0","    } "
"0","    p"
"0","  }"
"0","  d = degree(g)"
"0","  list("
"0","    degreeD = d,"
"0","    distD = distances(g)[is.finite(distances(g))],"
"0","    summary = summary(d),"
"0","    skewness = skewness(d),"
"0","    ccdf = ccdf(d)"
"0","  )"
"0","}"
"0",""
"0","assortativita = function(g, m, v){"
"0","  data.frame("
"0","    assortativityE = modularity(g, membership = m),"
"0","    assortativityS = assortativity(roads, v),"
"0","    assortativityD = assortativity_degree(g)"
"0","  )"
"0","}"
"0",""
"0","motif = function(g){"
"0","  data.frame("
"0","    transitivity = transitivity(g, type = ""global"")"
"0","  )"
"0","}"
"0",""
